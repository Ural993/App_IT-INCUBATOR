{"version":3,"sources":["components/Footer/Footer.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","reportWebVitals.ts","redux/dialogs-reducer.ts","api/api.ts","redux/profile-reducer.ts","redux/users-reducer.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/Footer/Footer.tsx","utils/validators/validators.ts","redux/users-selectors.ts","assets/img/loader.svg","components/Common/Preloader/Preloader.tsx","assets/img/user.jpg","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Common/FormControls/FormControls.tsx","components/Login/Login.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Dialogs/DialogItem.tsx","components/Dialogs/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","App.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/Common/FormControls/FormControls.module.css","components/Navbar/Navbar.module.css","components/Users/Users.module.css","components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_MESSAGE","initialState","dialogs","name","id","v1","messages","message","instance","axios","create","withCredentials","headers","baseURL","usersAPI","currentPage","pageSize","get","response","data","userId","post","delete","profileAPI","status","put","authAPI","login","password","rememberMe","email","ADD_POST","SET_USER_PROFILE","GET_STATUS","posts","newPostText","profile","setUserProfile","type","setStatus","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingProgress","setUsers","setTotalUsersCount","toggleIsFetching","toggleIsFollowingProgress","SET_USER_DATA","isAuth","setUserData","payload","getAuthUserDate","dispatch","resultCode","SET_INITIALIZED","initialized","rootReducer","combineReducers","profilePage","state","action","dialogsPage","usersPage","map","u","followed","filter","auth","app","form","formReducer","store","createStore","applyMiddleware","thunk","window","Navbar","className","s","nav","to","activeClassName","active","Footer","footer","max","getUsers","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingProgress","Preloader","alt","src","loader","Users","props","pagesCount","Math","ceil","pages","i","push","p","onClick","sentCurrentPageHandler","selectedPage","User","user_img","photos","small","userPhoto","disabled","some","unfollow","follow","UsersAPIComponent","setCurrentPage","items","this","React","Component","UsersContainer","connect","followSuccess","unfollowSuccess","totalCount","Textarea","meta","input","hasError","error","touched","style","formControl","Input","required","value","maxLength30","length","Login","useSelector","useDispatch","LoginReduxForm","onSubmit","formData","stopSubmit","_error","reduxForm","handleSubmit","Field","placeholder","component","validate","groupError","Post","item","MyPosts","AddPostFormRedux","addPost","postText","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","e","updateStatus","changeStatus","currentTarget","prevProps","prevState","snapshot","onChange","autoFocus","onBlur","onDoubleClick","ProfileInfo","avatar","fullName","href","contacts","vk","facebook","target","rel","instagram","github","twitter","Profile","ProfileContainerAPI","match","params","history","getProfile","getStatus","compose","withRouter","DialogItem","dialog","Message","AddMessageFormRedux","addMessage","restProps","dialogsMap","d","messagesMap","m","dialogs_items","NewMessageBody","Header","header","HeaderContainer","App","initializeApp","path","render","ProfileContainer","exact","DialogsContainer","rerenderEntierTree","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.fc0831aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3K7hu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__1-AYj\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { v1 } from \"uuid\"\r\n\r\nlet ADD_MESSAGE = 'ADD_MESSAGE'\r\nexport type InitialDialogStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n}\r\ntype DialogsType = {\r\n    name: string,\r\n    id: string\r\n}\r\ntype MessageType = {\r\n    message: string,\r\n    id: string\r\n}\r\nlet initialState: InitialDialogStateType = {\r\n    dialogs: [\r\n        {name: 'Vovs', id: v1()},\r\n        {name: 'Petr', id: v1()},\r\n        {name: 'Sasha', id:v1()},\r\n        {name: 'Dimich', id: v1()}\r\n    ],\r\n    messages: [\r\n        {message: 'Hi, how are yoy?', id: v1()},\r\n        {message: 'Whre are you?', id: v1()},\r\n        {message: 'I am fine', id: v1()}\r\n    ]\r\n}\r\n\r\n\r\nexport let dialogsReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            return {...state, messages: [...state.messages, {message: action.message, id:v1()}]}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (message: string) => {\r\n    return {type: ADD_MESSAGE, message} as const\r\n}\r\ntype addMessageACType = ReturnType<typeof addMessage>\r\n\r\ntype ActionsType = addMessageACType","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n     withCredentials: true,\r\n     headers:{\r\n          'API-kEY':'fe88c94b-7e3d-4776-912d-349e13ec1b3a',\r\n     },\r\n     baseURL:'https://social-network.samuraijs.com/api/1.0/'\r\n\r\n})\r\n\r\nexport const usersAPI={\r\n     getUsers:(currentPage =1,pageSize=10) => {\r\n          return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n              .then(response =>{return response.data})\r\n     },\r\n     follow:(userId:string)=>{\r\n        return instance.post(`follow/${userId}`)\r\n     },\r\n     unfollow:(userId:string)=>{\r\n         return instance.delete(`follow/${userId}`)\r\n     },\r\n     getProfile:(userId:string)=>{\r\n          return instance.get(`profile/${userId}`)\r\n     },\r\n}\r\nexport  const profileAPI={\r\n     getStatus:(userId:string)=>{\r\n          return instance.get(`profile/status/${userId}`)\r\n     },\r\n     updateStatus:(status:string)=>{\r\n          return instance.put('profile/status', {status})\r\n     }\r\n}\r\n\r\nexport const authAPI={\r\n     me:() => {\r\n          return instance.get(`auth/me`)\r\n     },\r\n     login:(login:string, password:string, rememberMe=false) => {\r\n          return instance.post(`auth/login`, {email:login, password, rememberMe})\r\n     },\r\n     logout:() => {\r\n          return instance.delete(`auth/login`)\r\n     }\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\nimport {ProfileType} from \"../components/Common/types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\n\r\nlet ADD_POST = 'ADD_POST'\r\nlet SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nlet GET_STATUS = 'GET_STATUS'\r\ntype PostType = {\r\n    post: string\r\n    id: string\r\n}\r\nexport type InitialProfileStateType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\n\r\nlet initialState: InitialProfileStateType = {\r\n    posts: [\r\n        {id: v1(), post: 'Hi, how are yoy?'},\r\n        {id: v1(), post: 'Whre are you?'},\r\n        {id: v1(), post: 'I am fine hbh'}\r\n    ],\r\n    newPostText: \"\",\r\n    profile: null,\r\n    status: '',\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: any): InitialProfileStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            debugger\r\n            return {...state, posts: [...state.posts, {id: v1(), post: action.post}]}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case GET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype AddPostACType = {\r\n    type: typeof ADD_POST\r\n    post: string\r\n}\r\n\r\nexport function addPost(post: string): AddPostACType {\r\n    return {type: ADD_POST, post}\r\n}\r\n\r\ntype setUserProfileACType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType): setUserProfileACType => ({type: SET_USER_PROFILE, profile})\r\nconst setStatus = (status: string) => ({type: GET_STATUS, status})\r\n\r\nexport const getProfile = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfile(response.data))\r\n            })\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                dispatch(setStatus(response.data))\r\n            })\r\n    }\r\n}\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {PhotoType} from \"../components/Common/types/types\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotoType\r\n    followed: boolean\r\n}\r\nexport type initialUsersStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingProgress: Array<number>\r\n}\r\n\r\nlet initialState: initialUsersStateType = {\r\n    users: [\r\n        // { id: 1, followed: true, fullName: 'Nik', age: 14, photoUrl: 'https://pixelbox.ru/wp-content/uploads/2021/05/ava-vk-animal-91.jpg', status: 'I like drive', location: { city: 'Moscow', country: 'Russia' } },\r\n        // { id: 2, followed: false, fullName: 'Solo', age: 27, photoUrl: 'https://pixelbox.ru/wp-content/uploads/2021/05/ava-vk-animal-91.jpg', status: 'I am love Susen', location: { city: 'Orel', country: 'Russia' } },\r\n        // { id: 3, followed: true, fullName: 'Dimich', age: 33, photoUrl: 'https://pixelbox.ru/wp-content/uploads/2021/05/ava-vk-animal-91.jpg', status: 'I like programming', location: { city: 'Minsk', country: 'Belarus' } },\r\n\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingProgress: [],\r\n\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsType): initialUsersStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingProgress: action.followingProgress ? [...state.followingProgress, action.userId] : [...state.followingProgress.filter(id => id !== action.userId)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionsType =\r\n    FollowACType\r\n    | UnfollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingProgressACType\r\n\r\ntype FollowACType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followSuccess = (userId: number): FollowACType => ({type: FOLLOW, userId})\r\ntype UnfollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnfollowACType => ({type: UNFOLLOW, userId})\r\ntype SetUsersACType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersACType => ({type: SET_USERS, users})\r\ntype SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\ntype SetTotalUsersCountACType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountACType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\ntype ToggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\ntype ToggleIsFollowingProgressACType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    followingProgress: boolean\r\n    userId: number\r\n}\r\nexport const toggleIsFollowingProgress = (followingProgress: boolean, userId: number): ToggleIsFollowingProgressACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    followingProgress,\r\n    userId\r\n})\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then((data: any) => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = (userId:any) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFollowingProgress(true,userId))\r\n        usersAPI.follow(userId)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleIsFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport const unfollow = (userId:any) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFollowingProgress(true,userId))\r\n        usersAPI.unfollow(userId)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleIsFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n","import {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nlet SET_USER_DATA = 'SET_USER_DATA'\r\n\r\n\r\nexport type InitialAuthStateType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: InitialAuthStateType = {\r\n    id: '',\r\n    email: '',\r\n    login: '',\r\n    isAuth: false,\r\n\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {...state, ...action.payload}\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\ntype ActionType = setUserDataACType\r\ntype setUserDataACType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: InitialAuthStateType\r\n}\r\nexport const setUserData = (id:string, email:string, login:string, isAuth:boolean): setUserDataACType => ({type: SET_USER_DATA,\r\n    payload:{id, email, login, isAuth}})\r\n\r\nexport const getAuthUserDate =()=>(dispatch:Dispatch)=>{\r\n     return authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data\r\n                dispatch(setUserData(id, email, login, true))\r\n            }\r\n        })\r\n}\r\nexport const login =(login:string, password:string, rememberMe=false)=>(dispatch:any)=>{\r\n    authAPI.login(login, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserDate())\r\n            }\r\n            else {\r\n                let message = response.data.messages? response.data.messages[0]: \"Some error\"\r\n                dispatch(stopSubmit('login', {_error:message}))\r\n            }\r\n        })\r\n}\r\nexport const logout =()=>(dispatch:Dispatch)=>{\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserData('', '', '', false))\r\n            }\r\n        })\r\n}","import {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserDate} from \"./auth-reducer\";\r\n\r\nlet SET_INITIALIZED = 'SET_INITIALIZED'\r\n\r\n\r\nexport type InitialAuthStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialAuthStateType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: ActionType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {...state, initialized:true}\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\ntype ActionType = setInitializedACType\r\ntype setInitializedACType = {\r\n    type: typeof SET_INITIALIZED\r\n}\r\nexport const setInitialized = (): setInitializedACType => ({type: SET_INITIALIZED})\r\n\r\nexport const initializeApp =()=>(dispatch:any)=>{\r\n   let promise = dispatch(getAuthUserDate())\r\n    promise.then(()=>{\r\n            dispatch(setInitialized())\r\n    }\r\n    )\r\n}\r\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app:appReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className=\"container\">\r\n                <div><NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink></div>\r\n                <div><NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink></div>\r\n                <div><NavLink to=\"/users\">Users</NavLink></div>\r\n                <div><NavLink to=\"/news\">News</NavLink></div>\r\n                <div><NavLink to=\"/musics\">Musics</NavLink></div>\r\n                <div><NavLink to=\"/settings\">Settings</NavLink></div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Footer.module.css'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer className={s.footer}>\r\n            Footer\r\n        </footer>\r\n    )\r\n}","\r\n\r\nexport const required = (value:string) =>{\r\n    if(value) return undefined\r\n    return 'Field is required!'\r\n}\r\n\r\n const maxLength = (max:number)=>(value:string)=>{\r\n    if(value.length>max) return `Max length is ${max} symbols!`\r\n    return undefined\r\n}\r\nexport const maxLength30 =maxLength(30)","import {AppStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getUsersSelector =(state:AppStateType)=>{\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector, (users)=>{\r\n    return users\r\n})\r\nexport const getPageSize =(state:AppStateType)=>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount =(state:AppStateType)=>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage =(state:AppStateType)=>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching =(state:AppStateType)=>{\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingProgress =(state:AppStateType)=>{\r\n    return state.usersPage.followingProgress\r\n}","export default __webpack_public_path__ + \"static/media/loader.6bbff2a4.svg\";","import React from \"react\";\r\nimport  loader from '../../../assets/img/loader.svg'\r\n\r\nexport const Preloader =()=>{\r\n    return(\r\n        <img alt='#' src={loader}/>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.5a5558e5.jpg\";","import {UserType} from '../../redux/users-reducer'\r\nimport s from './Users.module.css'\r\nimport userPhoto from '../../assets/img/user.jpg'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    followingProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    sentCurrentPageHandler: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (followingProgress: boolean, userId: number) => void\r\n}\r\n\r\nexport const Users = (props: PropsType) => {\r\n\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return (\r\n                        <span onClick={() => props.sentCurrentPageHandler(p)}\r\n                              className={props.currentPage === p ? s.selectedPage : ''}>{p}</span>)\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => {\r\n                    return <div className={s.users}>\r\n                        <User key={u.id} u={u} followingProgress={props.followingProgress}/>\r\n                    </div>\r\n                })}\r\n        </div>\r\n    )\r\n}\r\nconst User = (props:any) => {\r\n    let u = props.u\r\n    return (\r\n        <>\r\n            <div className={s.user_img}>\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <img src={u.photos.small != null ? u.photos.small : userPhoto} alt=\"#\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div className={'user_contant'}>\r\n                <div className=\"name\">{u.name}</div>\r\n                {props.followed ?\r\n                    <button disabled={props.followingProgress.some((id:string) => id === u.id)} onClick={() => {\r\n                        props.unfollow(u.id)\r\n                    }}>Unfollow</button> :\r\n                    <button disabled={props.followingProgress.some((id:string)  => id === u.id)} onClick={() => {\r\n                        props.follow(u.id)\r\n                    }}>Follow</button>}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { usersAPI } from '../../api/api'\r\nimport {AppStateType} from '../../redux/redux-store'\r\nimport {\r\n    follow, requestUsers, initialUsersStateType,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching, toggleIsFollowingProgress,\r\n    unfollow,\r\n    UserType\r\n} from '../../redux/users-reducer'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from '../../redux/users-selectors'\r\nimport {Preloader} from '../Common/Preloader/Preloader'\r\nimport {Users} from './Users'\r\n\r\n\r\n\r\n// type MSTPType = {\r\n//     users: Array<UserType>\r\n//     pageSize: number\r\n//     totalUsersCount: number\r\n//     currentPage: number\r\n//     isFetching:boolean\r\n// }\r\n\r\ntype MDTPType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleIsFollowingProgress: (followingProgress:boolean, userId:number) => void\r\n    getUsers:(currentPage:number, pageSize:number)=>void\r\n}\r\ntype PropsType = initialUsersStateType & MDTPType\r\n\r\nclass UsersAPIComponent extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize ).then((data: any) => {\r\n        //         this.props.toggleIsFetching(false)\r\n        //         this.props.setUsers(data.items)\r\n        //         this.props.setTotalUsersCount(data.totalCount)\r\n        //     })\r\n    }\r\n\r\n    sentCurrentPageHandler = (currentPage: number) => {\r\n        this.props.setCurrentPage(currentPage)\r\n        this.props.toggleIsFetching(true)\r\n        usersAPI.getUsers(currentPage, this.props.pageSize )\r\n            .then((data: any) => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(data.items)\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users users={this.props.users} pageSize={this.props.pageSize}\r\n                       totalUsersCount={this.props.totalUsersCount} currentPage={this.props.currentPage}\r\n                       follow={this.props.follow} unfollow={this.props.unfollow}\r\n                       sentCurrentPageHandler={this.sentCurrentPageHandler}\r\n                       toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n                       followingProgress={this.props.followingProgress}\r\n                />\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): initialUsersStateType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingProgress: getFollowingProgress(state),\r\n\r\n    }\r\n}\r\n\r\n// const MapDispatchToProps = (dispatch: Dispatch):MDTPType  => {\r\n//     return ({\r\n//         follow: (userId: number) => dispatch(follow(userId)),\r\n//         unfollow: (userId: number) => dispatch(unfollow(userId)),\r\n//         setUsers: (users: Array<UserType>) => dispatch(setUsers(users)),\r\n//         setCurrentPage: (currentPage: number) => dispatch(setCurrentPage(currentPage)),\r\n//         setTotalUsersCount: (totalUsersCount: number) => dispatch(setTotalUsersCount(totalUsersCount)),\r\n//         toggleIsFetching: (isFetching:boolean)=>dispatch(toggleIsFetching(isFetching))\r\n//     })\r\n//}\r\n\r\nconst UsersContainer = connect<initialUsersStateType, MDTPType, {}, AppStateType>(MapStateToProps, {\r\n    follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching, \r\n    toggleIsFollowingProgress, getUsers: requestUsers})(UsersAPIComponent)\r\n\r\n\r\nexport default UsersContainer","import style from './FormControls.module.css'\r\n\r\nexport const Textarea =({meta, input, type, ...props}:any)=>{\r\n    const hasError = meta.error && meta.touched\r\n    return(\r\n        <div className={style.formControl+' '+ (hasError? style.error:'')}>\r\n            <textarea {...input} type={type}/>\r\n            {hasError && <div><span>{meta.error}</span></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input =({meta, input, type, ...props}:any)=>{\r\n    const hasError = meta.error && meta.touched\r\n    return(\r\n        <div className={style.formControl+' '+ (hasError? style.error:'')}>\r\n            <input {...input} type={type}/>\r\n            {hasError && <div><span>{meta.error}</span></div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../Common/FormControls/FormControls';\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from '../Common/FormControls/FormControls.module.css'\r\n\r\ntype PropsType = {}\r\n\r\n\r\nexport function Login(props: PropsType) {\r\n    let isAuth = useSelector<AppStateType>((state) => state.auth.isAuth)\r\n    let dispatch = useDispatch()\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.login, formData.password,\r\n            formData.rememberMe))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field type=\"text\" name={\"login\"} placeholder={\"Login\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"text\" name={\"password\"} placeholder={\"Password\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> remember me\r\n            </div>\r\n            {props.error && <div className={style.groupError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet LoginReduxForm = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n\r\ntype PropsType={\r\n    id:string\r\n    post:string\r\n}\r\n\r\nexport default function Post(props: PropsType) {\r\n    return (\r\n        <div className={s.item} key={props.id}>\r\n            {props.post}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {InitialProfileStateType} from '../../../redux/profile-reducer';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength30, required} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from '../../Common/FormControls/FormControls';\r\n\r\ntype PropsType = {\r\n    profilePage: InitialProfileStateType\r\n    addPost: (post:string) => void\r\n}\r\n\r\nexport default function MyPosts(props: PropsType) {\r\n    const onSubmit = (value: FormDataType) => {\r\n       props.addPost(value.postText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            my posts\r\n            <div>\r\n                <AddPostFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {props.profilePage.posts.map(p => (<Post key={p.id} {...p}  />))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'postText'} type=\"text\" validate={[required, maxLength30]}/>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\ntype FormDataType = {\r\n    postText: string\r\n}\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddPostForm'})(AddPostForm)","import React from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType, any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n                editMode: true\r\n            }\r\n        )\r\n    }\r\n    deactivateEditMode = (e: any) => {\r\n        this.setState({\r\n                editMode: false\r\n            }\r\n        )\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    changeStatus = (e: any) => {\r\n        let value = e.currentTarget.value\r\n        this.setState({\r\n            status: value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<any>, snapshot?: any) {\r\n        if(prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status:this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.editMode ? <div>\r\n                        <input onChange={this.changeStatus} autoFocus onBlur={this.deactivateEditMode}\r\n                               value={this.state.status} type=\"text\"/>\r\n                    </div> :\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '---'} </span>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../Common/types/types\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status:string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileInfo = (props: PropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img alt={'#'} src={props.profile.photos.small}/>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n            <div>\r\n                <h3>{props.profile.fullName}</h3>\r\n                <hr/>\r\n                <div>Profile in VK:<a href={props.profile.contacts.vk}>{props.profile.contacts.vk}</a></div>\r\n                <div>Profile in facebook: <a href={props.profile.contacts.facebook} target=\"_blank\"\r\n                                             rel=\"noreferrer\">{props.profile.contacts.facebook}</a></div>\r\n                <div>Profile in instagram: <a href={props.profile.contacts.instagram} target=\"_blank\"\r\n                                              rel=\"noreferrer\">{props.profile.contacts.instagram}</a></div>\r\n                <div>Profile in github:<a href={props.profile.contacts.github} target=\"_blank\"\r\n                                          rel=\"noreferrer\"> {props.profile.contacts.github} </a></div>\r\n                <div>Profile in twitter:<a href={props.profile.contacts.twitter} target=\"_blank\"\r\n                                           rel=\"noreferrer\"> {props.profile.contacts.twitter}</a></div>\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport {InitialProfileStateType} from \"../../redux/profile-reducer\";\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n    profilePage: InitialProfileStateType\r\n    addPost: (post:string) => void\r\n    updateStatus: (status: string) => void\r\n    status:string\r\n}\r\nexport function Profile(props: PropsType) {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.profilePage.profile} status={props.profilePage.status} updateStatus={props.updateStatus}/>\r\n            <MyPosts addPost={props.addPost} profilePage={props.profilePage} />\r\n        </div>\r\n    )\r\n}\r\n","import {connect} from 'react-redux';\r\nimport React, {ComponentType} from 'react';\r\nimport {\r\n    addPost, getProfile,\r\n    getStatus,\r\n    InitialProfileStateType,\r\n    setUserProfile, updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Profile} from \"./Profile\";\r\nimport {ProfileType} from \"../Common/types/types\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from 'redux';\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype MSTPType = {\r\n    profilePage: InitialProfileStateType\r\n    status:string\r\n    userId:string,\r\n    isAuth:boolean\r\n\r\n}\r\ntype MDTPType = {\r\n    addPost: (post:string) => void\r\n    updateNewPostText: (text: any) => void\r\n    setUserProfile: (profile: ProfileType) => void\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PropsType = RouteComponentProps<PathParamType> & OwnPropsType\r\ntype OwnPropsType = MSTPType & MDTPType\r\n\r\nclass ProfileContainerAPI extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.userId\r\n        }\r\n        if(!userId){\r\n            this.props.history.push('/login')\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MSTPType => {\r\n    return ({\r\n            profilePage: state.profilePage,\r\n            status:state.profilePage.status,\r\n            userId:state.auth.id,\r\n            isAuth:state.auth.isAuth\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport default compose <ComponentType>(connect(MapStateToProps, {\r\n    addPost,getStatus,updateStatus,\r\n    setUserProfile, getProfile\r\n}), withRouter)(ProfileContainerAPI)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialogs.module.css'\r\n\r\ntype DialogItemTypeProps = {\r\n    name: string;\r\n    id: string\r\n}\r\n\r\nexport default function DialogItem(props: DialogItemTypeProps) {\r\n    return (\r\n        <div className={s.dialog}><NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink></div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\n\r\ntype MessageTypeProps = {\r\n    message: string;\r\n}\r\n\r\nexport default function Message(props: MessageTypeProps) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { Textarea } from \"../Common/FormControls/FormControls\";\r\nimport React from \"react\";\r\nimport {maxLength30, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props)=>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'NewMessageBody'} validate={[required,maxLength30 ]}/>\r\n            </div>\r\n            <button>Add message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form:'dialog-add-message-form'})(AddMessageForm)\r\n\r\nexport type FormDataType={\r\n    NewMessageBody:string\r\n}","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport DialogItem from './DialogItem';\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message';\r\nimport {addMessage, InitialDialogStateType} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from 'redux';\r\nimport {AddMessageFormRedux, FormDataType} from \"./AddMessageForm\";\r\n\r\ntype PropsType = MSTPType & MDTPType\r\n\r\nfunction Dialogs(props: PropsType) {\r\n    let dialogsMap = props.dialogsPage.dialogs.map((d: any) => <DialogItem  key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesMap = props.dialogsPage.messages.map((m: any) => <Message  key ={m.id} message={m.message}/>)\r\n\r\n    const onClick = (value: FormDataType) => {\r\n        props.addMessage(value.NewMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogsMap}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesMap}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={onClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\ntype MSTPType = {\r\n    dialogsPage: InitialDialogStateType\r\n}\r\ntype MDTPType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nexport default compose<ComponentType>(connect(MapStateToProps, {addMessage}), withAuthRedirect)(Dialogs)","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MSTPType ={\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\r\n    const RedirectComponent = (props: MSTPType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to = {'/login'}\r\n        />\r\n        return <Component {...restProps as T}\r\n        />\r\n    }\r\n    const mapStateToProps =(state:AppStateType):MSTPType=>{\r\n        return{\r\n            isAuth: state.auth.isAuth\r\n        }\r\n    }\r\n    let ConnectRedirectComponent = connect(mapStateToProps, null)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logout} from '../../redux/auth-reducer';\r\n\r\ntype PropsType = {\r\n    login: string\r\n    isAuth: boolean\r\n}\r\nexport default function Header(props: PropsType) {\r\n    let dispatch = useDispatch()\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.login}>\r\n                {props.isAuth ? <NavLink to={'/login'}>{props.login}\r\n                        <button onClick={() => dispatch(logout())}>Logout</button>\r\n                    </NavLink>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype PropsType = {\r\n    login: string\r\n    isAuth:boolean\r\n}\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth:state.auth.isAuth,\r\n    }\r\n}\r\nexport default connect(MapStateToProps)(HeaderContainer)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Footer from './components/Footer/Footer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport {Login} from \"./components/Login/Login\";\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport {connect} from 'react-redux';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/Common/Preloader/Preloader\";\r\n\r\ntype MDTPTypeType = {\r\n    initializeApp: () => void\r\n}\r\ntype MSTPType = {\r\n    initialized: boolean\r\n}\r\ntype PropsType = MDTPTypeType & MSTPType\r\n\r\nclass App extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if(!this.props.initialized) return <Preloader/>\r\n        return (\r\n            <HashRouter>\r\n                <div className=\"app-wrapper\">\r\n                    <HeaderContainer/>\r\n                    <Navbar/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                        <Route exact path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                        <Route exact path='/users' render={() => <UsersContainer/>}/>\r\n                        <Route exact path='/login' render={() => <Login/>}/>\r\n                    </div>\r\n                    <Footer/>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {initializeApp})(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nlet rerenderEntierTree = () => {\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <App  />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n\r\n  );\r\n}\r\nrerenderEntierTree()\r\nstore.subscribe(rerenderEntierTree)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3V6_V\",\"dialog\":\"Dialogs_dialog__3d9mu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__36qs1\",\"formControl\":\"FormControls_formControl__3OfRf\",\"groupError\":\"FormControls_groupError__rUhU4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__bgasC\",\"active\":\"Navbar_active__rnkVo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__MVuEk\",\"user_img\":\"Users_user_img__1mIWN\",\"selectedPage\":\"Users_selectedPage__aVJHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__LoKIb\",\"login\":\"Header_login__1GcnA\"};"],"sourceRoot":""}