{"version":3,"sources":["components/Footer/Footer.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Navbar/Navbar.tsx","components/Footer/Footer.tsx","api/api.ts","redux/users-reducer.ts","assets/img/loader.svg","components/Common/Preloader/Preloader.tsx","assets/img/user.jpg","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","utils/validators/validators.ts","components/Header/HeaderContainer.tsx","components/Common/FormControls/FormControls.tsx","components/Login/Login.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","hoc/withAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Dialogs/DialogItem.tsx","components/Dialogs/Message.tsx","redux/dialogs-reducer.ts","components/Dialogs/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx","components/Dialogs/Dialogs.module.css","components/Common/FormControls/FormControls.module.css","components/Navbar/Navbar.module.css","components/Users/Users.module.css","components/Header/Header.module.css"],"names":["module","exports","Navbar","className","s","nav","to","activeClassName","active","Footer","footer","instance","axios","create","withCredentials","headers","baseURL","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","profileAPI","status","put","authAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","totalUsersCount","isFetching","followingProgress","setUsers","type","setTotalUsersCount","toggleIsFetching","toggleIsFollowingProgress","Preloader","alt","src","loader","Users","props","pagesCount","Math","ceil","pages","i","push","map","p","onClick","sentCurrentPageHandler","selectedPage","u","user_img","id","photos","small","userPhoto","name","followed","disabled","some","unfollow","follow","UsersAPIComponent","setCurrentPage","items","this","getUsers","React","Component","UsersContainer","connect","state","usersPage","dispatch","resultCode","followSuccess","unfollowSuccess","totalCount","Header","header","login","isAuth","max","SET_USER_DATA","email","setUserData","HeaderContainer","getAuthUserDate","auth","Textarea","meta","input","hasError","error","touched","style","formControl","Input","required","value","maxLength30","length","Login","LoginReduxForm","onSubmit","formData","reduxForm","form","handleSubmit","Field","placeholder","component","validate","ADD_POST","SET_USER_PROFILE","GET_STATUS","posts","v1","newPostText","profile","setUserProfile","setStatus","Post","item","MyPosts","AddPostFormRedux","addPost","postText","profilePage","ProfileStatus","editMode","activateEditMode","setState","deactivateEditMode","e","updateStatus","changeStatus","currentTarget","prevProps","prevState","snapshot","onChange","autoFocus","onBlur","onDoubleClick","ProfileInfo","avatar","fullName","href","contacts","vk","facebook","target","rel","instagram","github","twitter","Profile","withAuthRedirect","restProps","ProfileContainerAPI","match","params","getProfile","getStatus","compose","withRouter","DialogItem","dialog","Message","message","ADD_MESSAGE","dialogs","messages","AddMessageFormRedux","dialogsPage","addMessage","dialogsMap","d","messagesMap","m","dialogs_items","NewMessageBody","App","path","render","ProfileContainer","exact","DialogsContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","formReducer","store","createStore","applyMiddleware","thunk","window","rerenderEntierTree","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.4e43ba5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3K7hu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__1-AYj\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className=\"container\">\r\n                <div><NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink></div>\r\n                <div><NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink></div>\r\n                <div><NavLink to=\"/users\">Users</NavLink></div>\r\n                <div><NavLink to=\"/news\">News</NavLink></div>\r\n                <div><NavLink to=\"/musics\">Musics</NavLink></div>\r\n                <div><NavLink to=\"/settings\">Settings</NavLink></div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Footer.module.css'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer className={s.footer}>\r\n            Footer\r\n        </footer>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n     withCredentials: true,\r\n     headers:{\r\n          'API-kEY':'fe88c94b-7e3d-4776-912d-349e13ec1b3a',\r\n     },\r\n     baseURL:'https://social-network.samuraijs.com/api/1.0/'\r\n\r\n})\r\n\r\nexport const usersAPI={\r\n     getUsers:(currentPage =1,pageSize=10) => {\r\n          return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n              .then(response =>{return response.data})\r\n     },\r\n     follow:(userId:string)=>{\r\n        return instance.post(`follow/${userId}`)\r\n     },\r\n     unfollow:(userId:string)=>{\r\n         return instance.delete(`follow/${userId}`)\r\n     },\r\n     getProfile:(userId:string)=>{\r\n          return instance.get(`profile/${userId}`)\r\n     },\r\n}\r\nexport  const profileAPI={\r\n     getStatus:(userId:string)=>{\r\n          return instance.get(`profile/status/${userId}`)\r\n     },\r\n     updateStatus:(status:string)=>{\r\n          return instance.put('profile/status', {status})\r\n     }\r\n}\r\n\r\nexport const authAPI={\r\n     me:() => {\r\n          return instance.get(`auth/me`)\r\n     }\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {PhotoType} from \"../components/Common/types/types\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: PhotoType\r\n    followed: boolean\r\n}\r\nexport type initialUsersStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingProgress: Array<number>\r\n}\r\n\r\nlet initialState: initialUsersStateType = {\r\n    users: [\r\n        // { id: 1, followed: true, fullName: 'Nik', age: 14, photoUrl: 'https://pixelbox.ru/wp-content/uploads/2021/05/ava-vk-animal-91.jpg', status: 'I like drive', location: { city: 'Moscow', country: 'Russia' } },\r\n        // { id: 2, followed: false, fullName: 'Solo', age: 27, photoUrl: 'https://pixelbox.ru/wp-content/uploads/2021/05/ava-vk-animal-91.jpg', status: 'I am love Susen', location: { city: 'Orel', country: 'Russia' } },\r\n        // { id: 3, followed: true, fullName: 'Dimich', age: 33, photoUrl: 'https://pixelbox.ru/wp-content/uploads/2021/05/ava-vk-animal-91.jpg', status: 'I like programming', location: { city: 'Minsk', country: 'Belarus' } },\r\n\r\n    ],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingProgress: [],\r\n\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsType): initialUsersStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingProgress: action.followingProgress ? [...state.followingProgress, action.userId] : [...state.followingProgress.filter(id => id != action.userId)]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionsType =\r\n    FollowACType\r\n    | UnfollowACType\r\n    | SetUsersACType\r\n    | SetCurrentPageACType\r\n    | SetTotalUsersCountACType\r\n    | ToggleIsFetchingACType\r\n    | ToggleIsFollowingProgressACType\r\n\r\ntype FollowACType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followSuccess = (userId: number): FollowACType => ({type: FOLLOW, userId})\r\ntype UnfollowACType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnfollowACType => ({type: UNFOLLOW, userId})\r\ntype SetUsersACType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersACType => ({type: SET_USERS, users})\r\ntype SetCurrentPageACType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageACType => ({type: SET_CURRENT_PAGE, currentPage})\r\ntype SetTotalUsersCountACType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountACType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalUsersCount\r\n})\r\ntype ToggleIsFetchingACType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingACType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n})\r\ntype ToggleIsFollowingProgressACType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    followingProgress: boolean\r\n    userId: number\r\n}\r\nexport const toggleIsFollowingProgress = (followingProgress: boolean, userId: number): ToggleIsFollowingProgressACType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    followingProgress,\r\n    userId\r\n})\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then((data: any) => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = (userId:any) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFollowingProgress(true,userId))\r\n        usersAPI.follow(userId)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(followSuccess(userId))\r\n                }\r\n                dispatch(toggleIsFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\nexport const unfollow = (userId:any) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFollowingProgress(true,userId))\r\n        usersAPI.unfollow(userId)\r\n            .then((response: any) => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollowSuccess(userId))\r\n                }\r\n                dispatch(toggleIsFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/loader.6bbff2a4.svg\";","import React from \"react\";\r\nimport  loader from '../../../assets/img/loader.svg'\r\n\r\nexport const Preloader =()=>{\r\n    return(\r\n        <img alt='#' src={loader}/>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/user.5a5558e5.jpg\";","import {UserType} from '../../redux/users-reducer'\r\nimport s from './Users.module.css'\r\nimport userPhoto from '../../assets/img/user.jpg'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    followingProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    sentCurrentPageHandler: (currentPage: number) => void\r\n    toggleIsFollowingProgress: (followingProgress: boolean, userId: number) => void\r\n}\r\n\r\nexport const Users = (props: PropsType) => {\r\n\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return (\r\n                        <span onClick={() => props.sentCurrentPageHandler(p)}\r\n                              className={props.currentPage === p ? s.selectedPage : ''}>{p}</span>)\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map(u => {\r\n                    return <div className={s.users}>\r\n                        <div className={s.user_img}>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <img src={u.photos.small != null ? u.photos.small : userPhoto} alt=\"#\"/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={'user_contant'}>\r\n                            <div className=\"name\">{u.name}</div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingProgress.some(id => id == u.id)} onClick={() => {\r\n                                    {\r\n                                        props.unfollow(u.id)\r\n\r\n                                    }\r\n                                }}>Unfollow</button> :\r\n                                <button disabled={props.followingProgress.some(id => id == u.id)} onClick={() => {\r\n                                    {\r\n                                     props.follow(u.id)\r\n                                    }\r\n                                }}>Follow</button>}\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                })}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { usersAPI } from '../../api/api'\r\nimport {AppStateType} from '../../redux/redux-store'\r\nimport {\r\n    follow, getUsers, initialUsersStateType,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    toggleIsFetching, toggleIsFollowingProgress,\r\n    unfollow,\r\n    UserType\r\n} from '../../redux/users-reducer'\r\nimport {Preloader} from '../Common/Preloader/Preloader'\r\nimport {Users} from './Users'\r\n\r\n\r\n\r\n// type MSTPType = {\r\n//     users: Array<UserType>\r\n//     pageSize: number\r\n//     totalUsersCount: number\r\n//     currentPage: number\r\n//     isFetching:boolean\r\n// }\r\n\r\ntype MDTPType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleIsFollowingProgress: (followingProgress:boolean, userId:number) => void\r\n    getUsers:(currentPage:number, pageSize:number)=>void\r\n}\r\ntype PropsType = initialUsersStateType & MDTPType\r\n\r\nclass UsersAPIComponent extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n        // this.props.toggleIsFetching(true)\r\n        // usersAPI.getUsers(this.props.currentPage, this.props.pageSize ).then((data: any) => {\r\n        //         this.props.toggleIsFetching(false)\r\n        //         this.props.setUsers(data.items)\r\n        //         this.props.setTotalUsersCount(data.totalCount)\r\n        //     })\r\n    }\r\n\r\n    sentCurrentPageHandler = (currentPage: number) => {\r\n        this.props.setCurrentPage(currentPage)\r\n        this.props.toggleIsFetching(true)\r\n        usersAPI.getUsers(currentPage, this.props.pageSize )\r\n            .then((data: any) => {\r\n                this.props.toggleIsFetching(false)\r\n                this.props.setUsers(data.items)\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users users={this.props.users} pageSize={this.props.pageSize}\r\n                       totalUsersCount={this.props.totalUsersCount} currentPage={this.props.currentPage}\r\n                       follow={this.props.follow} unfollow={this.props.unfollow}\r\n                       sentCurrentPageHandler={this.sentCurrentPageHandler}\r\n                       toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n                       followingProgress={this.props.followingProgress}\r\n                />\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType): initialUsersStateType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingProgress: state.usersPage.followingProgress\r\n\r\n    }\r\n}\r\n\r\n// const MapDispatchToProps = (dispatch: Dispatch):MDTPType  => {\r\n//     return ({\r\n//         follow: (userId: number) => dispatch(follow(userId)),\r\n//         unfollow: (userId: number) => dispatch(unfollow(userId)),\r\n//         setUsers: (users: Array<UserType>) => dispatch(setUsers(users)),\r\n//         setCurrentPage: (currentPage: number) => dispatch(setCurrentPage(currentPage)),\r\n//         setTotalUsersCount: (totalUsersCount: number) => dispatch(setTotalUsersCount(totalUsersCount)),\r\n//         toggleIsFetching: (isFetching:boolean)=>dispatch(toggleIsFetching(isFetching))\r\n//     })\r\n//}\r\n\r\nconst UsersContainer = connect<initialUsersStateType, MDTPType, {}, AppStateType>(MapStateToProps, {\r\n    follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching, \r\n    toggleIsFollowingProgress, getUsers})(UsersAPIComponent)\r\n\r\n\r\nexport default UsersContainer","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css'\r\n\r\ntype PropsType ={\r\n    login: string\r\n    isAuth:boolean\r\n}\r\nexport default function Header(props:PropsType) {\r\n    return (\r\n        <header className={s.header}>\r\n<div className={s.login}>\r\n    {props.isAuth ?<NavLink to={'/login'}>{props.login}</NavLink>:<NavLink to={'/login'}>Login</NavLink>}\r\n</div>\r\n        </header>\r\n    )\r\n}","import {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet SET_USER_DATA = 'SET_USER_DATA'\r\n\r\n\r\nexport type InitialAuthStateType = {\r\n    id: number | null\r\n    email: string\r\n    login: string\r\n    isAuth: boolean\r\n}\r\n\r\nlet initialState: InitialAuthStateType = {\r\n    id: null,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false,\r\n\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {...state, ...action.data, isAuth: true}\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\ntype ActionType = setUserDataACType\r\ntype setUserDataACType = {\r\n    type: typeof SET_USER_DATA\r\n    data: InitialAuthStateType\r\n}\r\nexport const setUserData = (data: InitialAuthStateType): setUserDataACType => ({type: SET_USER_DATA, data})\r\n\r\nexport const getAuthUserDate =()=>(dispatch:Dispatch)=>{\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserData(response.data.data))\r\n            }\r\n        })\r\n}","\r\n\r\nexport const required = (value:string) =>{\r\n    if(value) return undefined\r\n    return 'Field is required!'\r\n}\r\n\r\n const maxLength = (max:number)=>(value:string)=>{\r\n    if(value.length>max) return `Max length is ${max} symbols!`\r\n    return undefined\r\n}\r\nexport const maxLength30 =maxLength(30)","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport axios from \"axios\";\r\nimport {getAuthUserDate, InitialAuthStateType, setUserData} from \"../../redux/auth-reducer\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\n\r\ntype PropsType = {\r\n    login: string\r\n    isAuth:boolean\r\n    setUserData:(data: InitialAuthStateType)=>void\r\n    getAuthUserDate:()=>void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserDate()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth:state.auth.isAuth,\r\n    }\r\n}\r\nexport default connect(MapStateToProps, {setUserData, getAuthUserDate})(HeaderContainer)\r\n\r\n\r\n\r\n","import style from './FormControls.module.css'\r\n\r\nexport const Textarea =({meta, input, type, ...props}:any)=>{\r\n    const hasError = meta.error && meta.touched\r\n    return(\r\n        <div className={style.formControl+' '+ (hasError? style.error:'')}>\r\n            <textarea {...input} type={type}/>\r\n            {hasError && <div><span>{meta.error}</span></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input =({meta, input, type, ...props}:any)=>{\r\n    const hasError = meta.error && meta.touched\r\n    return(\r\n        <div className={style.formControl+' '+ (hasError? style.error:'')}>\r\n            <input {...input} type={type}/>\r\n            {hasError && <div><span>{meta.error}</span></div>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport { Input } from '../Common/FormControls/FormControls';\r\nimport {maxLength30, required} from \"../../utils/validators/validators\";\r\n\r\ntype PropsType = {}\r\n\r\n\r\nexport function Login(props: PropsType) {\r\n    const onSubmit = (formData: FormDataType) => {\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field type=\"text\" name={\"login\"} placeholder={\"Login\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"text\" name={\"password\"} placeholder={\"Password\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> remember me\r\n            </div>\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet LoginReduxForm = reduxForm<FormDataType>({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)","import {v1} from \"uuid\";\r\nimport {ProfileType} from \"../components/Common/types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\n\r\nlet ADD_POST = 'ADD_POST'\r\nlet SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nlet GET_STATUS = 'GET_STATUS'\r\ntype PostType = {\r\n    post: string\r\n    id: string\r\n}\r\nexport type InitialProfileStateType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\n\r\nlet initialState: InitialProfileStateType = {\r\n    posts: [\r\n        {id: v1(), post: 'Hi, how are yoy?'},\r\n        {id: v1(), post: 'Whre are you?'},\r\n        {id: v1(), post: 'I am fine hbh'}\r\n    ],\r\n    newPostText: \"\",\r\n    profile: null,\r\n    status: '',\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: any): InitialProfileStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            debugger\r\n            return {...state, posts: [...state.posts, {id: v1(), post: action.post}]}\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case GET_STATUS: {\r\n            return {...state, status: action.status}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype AddPostACType = {\r\n    type: typeof ADD_POST\r\n    post: string\r\n}\r\n\r\nexport function addPost(post: string): AddPostACType {\r\n    return {type: ADD_POST, post}\r\n}\r\n\r\ntype setUserProfileACType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType): setUserProfileACType => ({type: SET_USER_PROFILE, profile})\r\nconst setStatus = (status: string) => ({type: GET_STATUS, status})\r\n\r\nexport const getProfile = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfile(response.data))\r\n            })\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(response => {\r\n                dispatch(setStatus(response.data))\r\n            })\r\n    }\r\n}\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatus(status))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\n\r\ntype PropsType={\r\n    id:string\r\n    post:string\r\n}\r\n\r\nexport default function Post(props: PropsType) {\r\n    return (\r\n        <div className={s.item} key={props.id}>\r\n            {props.post}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {InitialProfileStateType} from '../../../redux/profile-reducer';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLength30, required} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from '../../Common/FormControls/FormControls';\r\n\r\ntype PropsType = {\r\n    profilePage: InitialProfileStateType\r\n    addPost: (post:string) => void\r\n}\r\n\r\nexport default function MyPosts(props: PropsType) {\r\n    const onSubmit = (value: FormDataType) => {\r\n       props.addPost(value.postText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            my posts\r\n            <div>\r\n                <AddPostFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {props.profilePage.posts.map(p => (<Post {...p}  />))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={'postText'} type=\"text\" validate={[required, maxLength30]}/>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\ntype FormDataType = {\r\n    postText: string\r\n}\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddPostForm'})(AddPostForm)","import React from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType, any> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n                editMode: true\r\n            }\r\n        )\r\n    }\r\n    deactivateEditMode = (e: any) => {\r\n        this.setState({\r\n                editMode: false\r\n            }\r\n        )\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    changeStatus = (e: any) => {\r\n        let value = e.currentTarget.value\r\n        this.setState({\r\n            status: value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<any>, snapshot?: any) {\r\n        if(prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status:this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.editMode ? <div>\r\n                        <input onChange={this.changeStatus} autoFocus onBlur={this.deactivateEditMode}\r\n                               value={this.state.status} type=\"text\"/>\r\n                    </div> :\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '---'} </span>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../Common/types/types\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status:string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileInfo = (props: PropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img alt={'#'} src={props.profile.photos.small}/>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n            <div>\r\n                <h3>{props.profile.fullName}</h3>\r\n                <hr/>\r\n                <div>Profile in VK:<a href='#'>{props.profile.contacts.vk}</a></div>\r\n                <div>Profile in facebook: <a href={props.profile.contacts.facebook} target=\"_blank\"\r\n                                             rel=\"noreferrer\">{props.profile.contacts.facebook}</a></div>\r\n                <div>Profile in instagram: <a href={props.profile.contacts.instagram} target=\"_blank\"\r\n                                              rel=\"noreferrer\">{props.profile.contacts.instagram}</a></div>\r\n                <div>Profile in github:<a href={props.profile.contacts.github} target=\"_blank\"\r\n                                          rel=\"noreferrer\"> {props.profile.contacts.github} </a></div>\r\n                <div>Profile in twitter:<a href={props.profile.contacts.twitter} target=\"_blank\"\r\n                                           rel=\"noreferrer\"> {props.profile.contacts.twitter}</a></div>\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport {InitialProfileStateType} from \"../../redux/profile-reducer\";\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n    profilePage: InitialProfileStateType\r\n    addPost: (post:string) => void\r\n    updateStatus: (status: string) => void\r\n    status:string\r\n}\r\nexport function Profile(props: PropsType) {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile = {props.profilePage.profile} status={props.profilePage.status} updateStatus={props.updateStatus}/>\r\n            <MyPosts addPost={props.addPost} profilePage={props.profilePage} />\r\n        </div>\r\n    )\r\n}\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MSTPType ={\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\r\n    const RedirectComponent = (props: MSTPType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to = {'/login'}\r\n        />\r\n        return <Component {...restProps as T}\r\n        />\r\n    }\r\n    const mapStateToProps =(state:AppStateType):MSTPType=>{\r\n        return{\r\n            isAuth: state.auth.isAuth\r\n        }\r\n    }\r\n    let ConnectRedirectComponent = connect(mapStateToProps, null)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n}","import {connect} from 'react-redux';\r\nimport React, {ComponentType} from 'react';\r\nimport {\r\n    addPost, getProfile,\r\n    getStatus,\r\n    InitialProfileStateType,\r\n    setUserProfile, updateStatus\r\n} from '../../redux/profile-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Profile} from \"./Profile\";\r\nimport {ProfileType} from \"../Common/types/types\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from 'redux';\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype MSTPType = {\r\n    profilePage: InitialProfileStateType\r\n    status:string\r\n}\r\ntype MDTPType = {\r\n    addPost: (post:string) => void\r\n    updateNewPostText: (text: any) => void\r\n    setUserProfile: (profile: ProfileType) => void\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PropsType = RouteComponentProps<PathParamType> & OwnPropsType\r\ntype OwnPropsType = MSTPType & MDTPType\r\n\r\nclass ProfileContainerAPI extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = '1143'\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType): MSTPType => {\r\n    return ({\r\n            profilePage: state.profilePage,\r\n            status:state.profilePage.status\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport default compose <ComponentType>(connect(MapStateToProps, {\r\n    addPost,getStatus,updateStatus,\r\n    setUserProfile, getProfile\r\n}), withRouter, withAuthRedirect)(ProfileContainerAPI)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialogs.module.css'\r\n\r\ntype DialogItemTypeProps = {\r\n    name: string;\r\n    id: string\r\n}\r\n\r\nexport default function DialogItem(props: DialogItemTypeProps) {\r\n    return (\r\n        <div className={s.dialog}><NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink></div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\n\r\ntype MessageTypeProps = {\r\n    message: string;\r\n}\r\n\r\nexport default function Message(props: MessageTypeProps) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n","let ADD_MESSAGE = 'ADD_MESSAGE'\r\nexport type InitialDialogStateType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessageType>\r\n}\r\ntype DialogsType = {\r\n    name: string,\r\n    id: number\r\n}\r\ntype MessageType = {\r\n    message: string\r\n}\r\nlet initialState: InitialDialogStateType = {\r\n    dialogs: [\r\n        {name: 'Vovs', id: 1},\r\n        {name: 'Petr', id: 2},\r\n        {name: 'Sasha', id: 3},\r\n        {name: 'Dimich', id: 4}\r\n    ],\r\n    messages: [\r\n        {message: 'Hi, how are yoy?'},\r\n        {message: 'Whre are you?'},\r\n        {message: 'I am fine'}\r\n    ]\r\n}\r\n\r\n\r\nexport let dialogsReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:{\r\n            return {...state, messages: [...state.messages, {message: action.message}]}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessage = (message: string) => {\r\n    return {type: ADD_MESSAGE, message} as const\r\n}\r\ntype addMessageACType = ReturnType<typeof addMessage>\r\n\r\ntype ActionsType = addMessageACType","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { Textarea } from \"../Common/FormControls/FormControls\";\r\nimport React from \"react\";\r\nimport {maxLength30, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<FormDataType>> = (props)=>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={'NewMessageBody'} validate={[required,maxLength30 ]}/>\r\n            </div>\r\n            <button>Add message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<FormDataType>({form:'dialog-add-message-form'})(AddMessageForm)\r\n\r\nexport type FormDataType={\r\n    NewMessageBody:string\r\n}","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport DialogItem from './DialogItem';\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message';\r\nimport {addMessage, InitialDialogStateType} from \"../../redux/dialogs-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from 'redux';\r\nimport {AddMessageFormRedux, FormDataType} from \"./AddMessageForm\";\r\n\r\ntype PropsType = MSTPType & MDTPType\r\n\r\nfunction Dialogs(props: PropsType) {\r\n    let dialogsMap = props.dialogsPage.dialogs.map((d: any) => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesMap = props.dialogsPage.messages.map((m: any) => <Message message={m.message}/>)\r\n\r\n    const onClick = (value: FormDataType) => {\r\n        props.addMessage(value.NewMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_items}>\r\n                {dialogsMap}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesMap}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={onClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\ntype MSTPType = {\r\n    dialogsPage: InitialDialogStateType\r\n}\r\ntype MDTPType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nexport default compose<ComponentType>(connect(MapStateToProps, {addMessage}), withAuthRedirect)(Dialogs)","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Footer from './components/Footer/Footer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport {Login} from \"./components/Login/Login\";\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\n\r\ntype PropsType={\r\n\r\n}\r\n\r\n\r\nfunction App(props: PropsType) {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className='app-wrapper-content'>\r\n          <Route path='/profile/:userId?' render={() => <ProfileContainer />} />\r\n          <Route exact path='/dialogs' render={() => <DialogsContainer />} />\r\n          <Route exact path='/users' render={() => <UsersContainer />} />\r\n          <Route exact path='/login' render={() => <Login />} />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers, createStore, applyMiddleware} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\nlet rerenderEntierTree = () => {\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <App  />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n\r\n  );\r\n}\r\nrerenderEntierTree()\r\nstore.subscribe(rerenderEntierTree)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3V6_V\",\"dialog\":\"Dialogs_dialog__3d9mu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__36qs1\",\"formControl\":\"FormControls_formControl__3OfRf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__bgasC\",\"active\":\"Navbar_active__rnkVo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__MVuEk\",\"user_img\":\"Users_user_img__1mIWN\",\"selectedPage\":\"Users_selectedPage__aVJHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__LoKIb\",\"login\":\"Header_login__1GcnA\"};"],"sourceRoot":""}